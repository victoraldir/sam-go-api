// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/victoraldir/birthday-api/app/internal/app/birthday/usecases (interfaces: PutBirthdayUseCase)

// Package usecases is a generated GoMock package.
package usecases

import (
	reflect "reflect"

	usecases "github.com/victoraldir/birthday-api/app/internal/app/birthday/usecases"
	gomock "go.uber.org/mock/gomock"
)

// MockPutBirthdayUseCase is a mock of PutBirthdayUseCase interface.
type MockPutBirthdayUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPutBirthdayUseCaseMockRecorder
}

// MockPutBirthdayUseCaseMockRecorder is the mock recorder for MockPutBirthdayUseCase.
type MockPutBirthdayUseCaseMockRecorder struct {
	mock *MockPutBirthdayUseCase
}

// NewMockPutBirthdayUseCase creates a new mock instance.
func NewMockPutBirthdayUseCase(ctrl *gomock.Controller) *MockPutBirthdayUseCase {
	mock := &MockPutBirthdayUseCase{ctrl: ctrl}
	mock.recorder = &MockPutBirthdayUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPutBirthdayUseCase) EXPECT() *MockPutBirthdayUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockPutBirthdayUseCase) Execute(arg0 usecases.PutBirthdayCommand) (*usecases.PutBirthdayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(*usecases.PutBirthdayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockPutBirthdayUseCaseMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPutBirthdayUseCase)(nil).Execute), arg0)
}
