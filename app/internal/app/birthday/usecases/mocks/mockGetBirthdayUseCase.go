// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/victoraldir/birthday-api/app/internal/app/birthday/usecases (interfaces: GetBirthdayUseCase)

// Package usecases is a generated GoMock package.
package usecases

import (
	reflect "reflect"

	usecases "github.com/victoraldir/birthday-api/app/internal/app/birthday/usecases"
	gomock "go.uber.org/mock/gomock"
)

// MockGetBirthdayUseCase is a mock of GetBirthdayUseCase interface.
type MockGetBirthdayUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetBirthdayUseCaseMockRecorder
}

// MockGetBirthdayUseCaseMockRecorder is the mock recorder for MockGetBirthdayUseCase.
type MockGetBirthdayUseCaseMockRecorder struct {
	mock *MockGetBirthdayUseCase
}

// NewMockGetBirthdayUseCase creates a new mock instance.
func NewMockGetBirthdayUseCase(ctrl *gomock.Controller) *MockGetBirthdayUseCase {
	mock := &MockGetBirthdayUseCase{ctrl: ctrl}
	mock.recorder = &MockGetBirthdayUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetBirthdayUseCase) EXPECT() *MockGetBirthdayUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetBirthdayUseCase) Execute(arg0 string) (*usecases.GetBirthdayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(*usecases.GetBirthdayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetBirthdayUseCaseMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetBirthdayUseCase)(nil).Execute), arg0)
}
