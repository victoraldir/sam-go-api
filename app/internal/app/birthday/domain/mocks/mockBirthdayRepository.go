// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/victoraldir/birthday-api/app/internal/app/birthday/domain (interfaces: BirthdayRepository)

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	domain "github.com/victoraldir/birthday-api/app/internal/app/birthday/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockBirthdayRepository is a mock of BirthdayRepository interface.
type MockBirthdayRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBirthdayRepositoryMockRecorder
}

// MockBirthdayRepositoryMockRecorder is the mock recorder for MockBirthdayRepository.
type MockBirthdayRepositoryMockRecorder struct {
	mock *MockBirthdayRepository
}

// NewMockBirthdayRepository creates a new mock instance.
func NewMockBirthdayRepository(ctrl *gomock.Controller) *MockBirthdayRepository {
	mock := &MockBirthdayRepository{ctrl: ctrl}
	mock.recorder = &MockBirthdayRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBirthdayRepository) EXPECT() *MockBirthdayRepositoryMockRecorder {
	return m.recorder
}

// GetBirthday mocks base method.
func (m *MockBirthdayRepository) GetBirthday(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBirthday", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBirthday indicates an expected call of GetBirthday.
func (mr *MockBirthdayRepositoryMockRecorder) GetBirthday(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBirthday", reflect.TypeOf((*MockBirthdayRepository)(nil).GetBirthday), arg0)
}

// PutBirthday mocks base method.
func (m *MockBirthdayRepository) PutBirthday(arg0 domain.Birthday) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBirthday", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBirthday indicates an expected call of PutBirthday.
func (mr *MockBirthdayRepositoryMockRecorder) PutBirthday(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBirthday", reflect.TypeOf((*MockBirthdayRepository)(nil).PutBirthday), arg0)
}
